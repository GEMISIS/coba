#!/usr/bin/env python
# -*- coding: utf-8 -*-
from __future__ import print_function

import datetime
import decimal
import getpass
import re
import shlex
import subprocess
import sys
import textwrap

import coba

try:
    import readline
except ImportError:
    # No libreadline support :(
    pass


def parse_date(text):
    """
    Return a datetime.datetime instance representing the text. Relies on
    the GNU coreutils program "date".
    """
    numbers = {
        'one': '1', 'two': '2', 'three': '3', 'four': '4', 'five': '5',
        'six': '6', 'seven': '7', 'eight': '8', 'nine': '9', 'ten': '10',
        'eleven': '11', 'twelve': '12', 'thirteen': '13', 'fourteen': '14',
        'fifteen': '15', 'sixteen': '16', 'seventeen': '17', 'eighteen': '18',
        'nineteen': '19', 'twenty': '20'
    }

    # Reformulate string to make it easier for the date command to parse.
    tokens = re.findall(r"((?:[\d+-][\d:.+-]+|[^\W0-9]+))", text.lower())
    tokens = (numbers.get(token, token) for token in tokens)
    text = ' '.join(
        (token for token in tokens if token.isdigit() or len(token) > 2))

    process = subprocess.Popen(["date", "--date", text, "+%s"],
        stdout=subprocess.PIPE, stderr=subprocess.PIPE)
    stdout = process.stdout.read().strip()
    stderr = process.stderr.read().strip()

    if not stdout:
        message = stderr or ("Unable to parse date %r." % text)
        raise ValueError(message)

    return datetime.datetime.utcfromtimestamp(int(stdout))


def main():
    username = raw_input('Username: ')
    password = getpass.getpass()
    agent = coba.ChaseOnlineBankingAgent(username=username, password=password)

    def search_accounts(terms, accounts=None, greedy=False):
        """
        Yield accounts whose names contain the search terms. If no search terms
        are provided, all accounts are returned. When `greedy` is enabled, any
        accounts that contain at least one of the search terms will be returned
        whereas without it, only accounts that contain all of the search terms
        are returned.
        """
        accounts = accounts or agent.accounts
        if not terms:
            return accounts

        if greedy:
            picker = any
        else:
            picker = all

        hits = list()
        for account in accounts:
            account_name_string = [account.name]
            if 'rewards_program' in account.attributes:
                account_name_string.append(account.rewards_program)

            subject = ' '.join(account_name_string).lower()
            if picker((term in subject for term in terms)):
                hits.append(account)

        return hits

    def list_accounts(*args):
        """
        List accounts with names and balances. This command accepts optional
        search terms as arguments, and accounts that contain any of the
        specified strings will be included in the output. When no search terms
        are provided, a balance is displayed below the unfiltered list of
        accounts. If one of the arguments is "deduct-pending", the most recent
        transactions of credit accounts will be inspected and any pending
        transactions will be used to adjust the balance which normally ignores
        pending transactions. This comes at a cost of speed.
        """
        if 'deduct-pending' in args:
            deduct_pending = True
            args = [arg for arg in args if arg != 'deduct-pending']
        else:
            deduct_pending = False

        values = list()
        for account in search_accounts(args):
            if isinstance(account, coba.ChaseDebitAccount):
                attr = (account, '', account.available_balance)
                values.append(account.available_balance)
            elif isinstance(account, coba.ChaseCreditAccount):
                if 'rewards_program' in account.attributes:
                    middle = account.rewards_program
                else:
                    middle = ''

                balance = account.current_balance
                if deduct_pending:
                    for transaction in account.transactions(maxpages=1):
                        if (transaction.date is None
                          or transaction.type == 'Pending'):
                            balance += transaction.amount

                attr = (account, middle, balance)
                values.append(-balance)

            print("%-32s  %-40s  %8s" % attr)

        if not args:
            print('---\n%-74s  %8s' % ('Balance:', sum(values)))

    def list_transactions(*args):
        """
        List transactions from accounts. This command accepts optional search
        terms as arguments, and accounts that contain any of the specified
        strings will have their transactions included in the output. When no
        search terms are provided, transactions from all accounts are shown. A
        date range can also be specified by providing an argument that contains
        a comma separated the "since" and "through" period. Because GNU date(1)
        is used for parsing the date, many common, human-readable forms of
        dates are accepted. Here are some examples:

        Show transactions from April 25th, 2013 through May 1st, 2013 in
        accounts that have "credit" in the name.

            ... 2013-04-25,2013-05-01 credit

        Transactions from one week ago through the present date; note that
        omitting the second part of the date implied "through the current date"
        whereas omitting the first part implies "since the beginning of time":

            ... "one week ago,"
        """
        # Assume anything with a comma in it is a date range and everything
        # else is a search term.
        terms = list()
        since = through = None
        for arg in args:
            if ',' in arg:
                since, through = arg.split(',')
                if since:
                    since = parse_date(since)
                    since = datetime.datetime(*since.timetuple()[:3])
                if through:
                    through = parse_date(through)
                    through = datetime.datetime(*through.timetuple()[:3])

            else:
                terms.append(arg)

        # Generate human-readable date range
        if since or through:
            rangemessage = 'Showing transactions'
            if since:
                rangemessage += ' since %s' % since.strftime('%B %d, %Y')
            if through:
                rangemessage += ' through %s' % through.strftime('%B %d, %Y')

        else:
            rangemessage = None

        # Normalize the transactions from the different account types
        now = datetime.datetime.now()
        displayed = list()
        for account in search_accounts(terms, greedy=True):
           displayed.extend(account.transactions(since, through))

        if rangemessage:
            print(rangemessage)

        displayed.sort(key=lambda e: e.date or now)
        colform = "%-60s  %10s %8s"
        for transaction in displayed:
            if transaction.date:
                date = transaction.date.strftime('%Y-%m-%d')
            else:
                date = 'Pending'

            print(colform % (transaction.name, date, transaction.amount))

    def parse_transfer_string(args, from_kw='from', to_kw='to', amounts=None):
        """
        Attempt to parse arguments for a transfer command into the amount,
        source account and destination account in the form of "(amount) from
        (source) to (destination)" where the "source" and "destination" are
        strings that qualify the account selected. The words "from" and "to"
        can be changed by adjusting the `from_km` and `to_kw` arguments
        respectively. In certain situations, an amount that is not a valid
        decimal may still need to be parsed as a valid value. These amounts can
        be supplied as list containing otherwise invalid values that should be
        permitted using the `amounts` keyword argument.
        """
        # Figure out the strings that represent the source, amount and
        # destination.
        from_ = list()
        to = None
        options = dict()
        for arg in args:
            arg = arg.lower()

            if 'amount' not in options:
                try:
                    options['amount'] = decimal.Decimal(arg)
                except decimal.InvalidOperation:
                    if amounts and arg in amounts:
                        options['amount'] = arg
                    else:
                        print('Invalid amount "%s".' % arg)

            else:
                if arg == from_kw:
                    continue
                elif arg == to_kw:
                    to = list()
                elif to is None:
                    from_.append(arg)
                else:
                    to.append(arg)

        # Exit if anything is invalid or unspecified.
        if not to:
            print('Unable to parse destination account.')
            return 1
        elif not 'amount' in options:
            print('Unable to parse currency amount.')
            return 1
        elif not from_:
            print('Unable to parse source account.')
            return 1

        # Figure out the accounts that match the substrings for the source and
        # destination.
        accounts = list(agent.accounts)
        source_account = search_accounts(from_, accounts=accounts)
        destination_account = search_accounts(to, accounts=accounts)

        # Make sure account selections are valid
        if not destination_account:
            print('No accounts matched the search terms for the destination.')
            return
        elif len(destination_account) > 1:
            print('Too many accounts matched destination search terms:')
            map(print, destination_account)
            return
        elif not source_account:
            print('No accounts matched the search terms for the source.')
            return
        elif len(source_account) > 1:
            print('Too many accounts matched source account search terms:')
            map(print, source_account)
            return
        elif destination_account == source_account:
            print('Destination and source cannot be the same accounts.')
            return

        return source_account[0], destination_account[0], options

    def transfer(*args):
        """
        Transfer money from one debit account to another. Takes the amount and
        search strings for the source and destination accounts as arguments in
        the following form. In the following example, $2000 is transferred from
        the account that contains "checking" in its name to the account the
        contains "saving" in its name:

            ... 2000 from checking to saving

        Multiple qualifiers can be added in the event that the search terms
        match more than one account. In this example below, $500 is transferred
        from a Chase Total Checking account to a Chase Premier Plus Checking
        account:

            ... 500 from premier checking to total checking
        """
        parsed = parse_transfer_string(args)
        if not parsed:
            return 1
        else:
            source_account, destination_account, options = parsed

        print("Transferring %s from %s to %s." % (
            options['amount'], source_account, destination_account))

        if sys.stdin.isatty():
            if not raw_input('Proceed? (y/N) ').strip().startswith(('y', 'Y')):
                return

        source_account.transfer_to(destination_account, **options)

    def repay_credit(*args):
        """
        Pay off the balance of a credit account. Takes the amount and
        search strings for the source and destination accounts as arguments in
        the following form: (amount) on (destination) with (source). The amount
        can also be specified as "statement", "minimum", or "current" to pay
        off the previous statement balance, make the minimum payment or pay off
        the current balance respectively.

        In the following example, $500 is paid against the balance of the
        credit card containing the text "amazon" from the debit account
        containing the text "checking:"

            ... 500 on amazon with checking

        As with account transfers, multiple strings can be used as qualifiers
        to narrow down the selected account.
        """
        special_amounts = {
            'statement': coba.PAY_STATEMENT_BALANCE,
            'minimum': coba.PAY_MINIMUM_BALANCE,
            'current': coba.PAY_CURRENT_BALANCE,
        }

        parsed = parse_transfer_string(args, amounts=special_amounts,
            from_kw='on', to_kw='with')
        if not parsed:
            return 1
        else:
            destination_account, source_account, options = parsed

        if options['amount'] in special_amounts:
            if options['amount'] == 'minimum':
                amount_text = 'minimum amount'
            else:
                amount_text = str(options['amount']) + ' balance'
            options['amount'] = special_amounts[options['amount']]
        else:
            amount_text = str(options['amount'])

        print("Paying %s on %s with %s." % (
            amount_text, destination_account, source_account))

        if sys.stdin.isatty():
            if not raw_input('Proceed? (y/N) ').strip().startswith(('y', 'Y')):
                return

        payment = destination_account.pay_from(source_account, **options)
        if payment != options['amount']:
            print('Payment of %s submitted.' % payment)

    dispatcher = {
        'accounts': list_accounts,
        'transactions': list_transactions,
        'transfer': transfer,
        'pay': repay_credit,
    }

    sysargs = sys.argv[1:] or None
    while True:
        try:
            if not sys.stdin.isatty() or sysargs:
                # Read command from command line arguments. Multiple commands
                # can be separated with slashes ("/").
                if '/' in sysargs:
                    seppos = sysargs.index('/') + 1
                    arguments = sysargs[:seppos]
                else:
                    seppos = None
                    arguments = list(sysargs)

                del sysargs[:seppos]

                if not arguments:
                    print('No commands given.', file=sys.stderr)
                    exit(1)
            else:
                userinput = raw_input('> ')
                try:
                    arguments = shlex.split(userinput)
                except Exception as exc:
                    print('Error parsing command tokens: %s' % exc)
                    continue

        except EOFError:
            print('')
            return
        except KeyboardInterrupt:
            print('')
            continue

        if arguments:
            command = arguments[0]
            options = arguments[1:]

            if command == 'help':
                if len(options) != 1 or options[0] == 'help':
                    print("Available actions:")
                    for action in dispatcher:
                        print("- %s" % action)

                    print('\nEnter "help" then an action name for more info.')

                else:
                    action = options[0]
                    if action not in dispatcher:
                        print('Unrecognized action "%s".' % action)
                    else:
                        docstring = dispatcher[action].__doc__
                        if docstring:
                            docstring = docstring.replace('...', action)
                            print(textwrap.dedent(docstring).strip())
                        else:
                            print('No help available for this action.')
                            status = 1

            else:
                try:
                    function = dispatcher[command]
                    try:
                        function(*options)
                    except Exception as exc:
                        print('Error: %s' % exc)
                        status = 127

                except KeyError:
                    print('Command "%s" not recognized.' % command)
                    status = 1

            # When processing CLI commands, exit after the last command is
            # executed.
            if not sysargs and sysargs is not None:
                exit(status)


if __name__ == "__main__":
    main()
